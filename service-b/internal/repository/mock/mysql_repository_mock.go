// Code generated by MockGen. DO NOT EDIT.
// Source: ./mysql_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	sqlc "service-b/internal/repository/mysql"

	gomock "github.com/golang/mock/gomock"
)

// MockIMySQLRepository is a mock of IMySQLRepository interface.
type MockIMySQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMySQLRepositoryMockRecorder
}

// MockIMySQLRepositoryMockRecorder is the mock recorder for MockIMySQLRepository.
type MockIMySQLRepositoryMockRecorder struct {
	mock *MockIMySQLRepository
}

// NewMockIMySQLRepository creates a new mock instance.
func NewMockIMySQLRepository(ctrl *gomock.Controller) *MockIMySQLRepository {
	mock := &MockIMySQLRepository{ctrl: ctrl}
	mock.recorder = &MockIMySQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMySQLRepository) EXPECT() *MockIMySQLRepositoryMockRecorder {
	return m.recorder
}

// CountSensorDataByDeviceCodeAndNumber mocks base method.
func (m *MockIMySQLRepository) CountSensorDataByDeviceCodeAndNumber(ctx context.Context, arg sqlc.CountSensorDataByDeviceCodeAndNumberParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSensorDataByDeviceCodeAndNumber", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSensorDataByDeviceCodeAndNumber indicates an expected call of CountSensorDataByDeviceCodeAndNumber.
func (mr *MockIMySQLRepositoryMockRecorder) CountSensorDataByDeviceCodeAndNumber(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSensorDataByDeviceCodeAndNumber", reflect.TypeOf((*MockIMySQLRepository)(nil).CountSensorDataByDeviceCodeAndNumber), ctx, arg)
}

// DeleteSensorData mocks base method.
func (m *MockIMySQLRepository) DeleteSensorData(ctx context.Context, arg sqlc.DeleteSensorDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSensorData", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSensorData indicates an expected call of DeleteSensorData.
func (mr *MockIMySQLRepositoryMockRecorder) DeleteSensorData(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSensorData", reflect.TypeOf((*MockIMySQLRepository)(nil).DeleteSensorData), ctx, arg)
}

// GetSensorDataByDeviceAndTime mocks base method.
func (m *MockIMySQLRepository) GetSensorDataByDeviceAndTime(ctx context.Context, arg sqlc.GetSensorDataByDeviceAndTimeParams) ([]sqlc.SensorDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorDataByDeviceAndTime", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SensorDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorDataByDeviceAndTime indicates an expected call of GetSensorDataByDeviceAndTime.
func (mr *MockIMySQLRepositoryMockRecorder) GetSensorDataByDeviceAndTime(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorDataByDeviceAndTime", reflect.TypeOf((*MockIMySQLRepository)(nil).GetSensorDataByDeviceAndTime), ctx, arg)
}

// GetSensorDataByDeviceCodeAndNumber mocks base method.
func (m *MockIMySQLRepository) GetSensorDataByDeviceCodeAndNumber(ctx context.Context, arg sqlc.GetSensorDataByDeviceCodeAndNumberParams) ([]sqlc.SensorDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorDataByDeviceCodeAndNumber", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SensorDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorDataByDeviceCodeAndNumber indicates an expected call of GetSensorDataByDeviceCodeAndNumber.
func (mr *MockIMySQLRepositoryMockRecorder) GetSensorDataByDeviceCodeAndNumber(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorDataByDeviceCodeAndNumber", reflect.TypeOf((*MockIMySQLRepository)(nil).GetSensorDataByDeviceCodeAndNumber), ctx, arg)
}

// GetSensorDataByTime mocks base method.
func (m *MockIMySQLRepository) GetSensorDataByTime(ctx context.Context, arg sqlc.GetSensorDataByTimeParams) ([]sqlc.SensorDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorDataByTime", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SensorDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorDataByTime indicates an expected call of GetSensorDataByTime.
func (mr *MockIMySQLRepositoryMockRecorder) GetSensorDataByTime(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorDataByTime", reflect.TypeOf((*MockIMySQLRepository)(nil).GetSensorDataByTime), ctx, arg)
}

// InsertSensorData mocks base method.
func (m *MockIMySQLRepository) InsertSensorData(ctx context.Context, arg sqlc.InsertSensorDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSensorData", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSensorData indicates an expected call of InsertSensorData.
func (mr *MockIMySQLRepositoryMockRecorder) InsertSensorData(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSensorData", reflect.TypeOf((*MockIMySQLRepository)(nil).InsertSensorData), ctx, arg)
}

// UpdateSensorData mocks base method.
func (m *MockIMySQLRepository) UpdateSensorData(ctx context.Context, arg sqlc.UpdateSensorDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSensorData", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSensorData indicates an expected call of UpdateSensorData.
func (mr *MockIMySQLRepositoryMockRecorder) UpdateSensorData(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSensorData", reflect.TypeOf((*MockIMySQLRepository)(nil).UpdateSensorData), ctx, arg)
}
