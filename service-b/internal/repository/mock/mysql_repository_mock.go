// Code generated by MockGen. DO NOT EDIT.
// Source: ./mysql_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	sqlc "service-b/internal/repository/mysql"

	gomock "github.com/golang/mock/gomock"
)

// MockIMySQLRepository is a mock of IMySQLRepository interface.
type MockIMySQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMySQLRepositoryMockRecorder
}

// MockIMySQLRepositoryMockRecorder is the mock recorder for MockIMySQLRepository.
type MockIMySQLRepositoryMockRecorder struct {
	mock *MockIMySQLRepository
}

// NewMockIMySQLRepository creates a new mock instance.
func NewMockIMySQLRepository(ctrl *gomock.Controller) *MockIMySQLRepository {
	mock := &MockIMySQLRepository{ctrl: ctrl}
	mock.recorder = &MockIMySQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMySQLRepository) EXPECT() *MockIMySQLRepositoryMockRecorder {
	return m.recorder
}

// CountSensors mocks base method.
func (m *MockIMySQLRepository) CountSensors(ctx context.Context, arg sqlc.CountSensorsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSensors", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSensors indicates an expected call of CountSensors.
func (mr *MockIMySQLRepositoryMockRecorder) CountSensors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSensors", reflect.TypeOf((*MockIMySQLRepository)(nil).CountSensors), ctx, arg)
}

// DeleteSensors mocks base method.
func (m *MockIMySQLRepository) DeleteSensors(ctx context.Context, arg sqlc.DeleteSensorsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSensors", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSensors indicates an expected call of DeleteSensors.
func (mr *MockIMySQLRepositoryMockRecorder) DeleteSensors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSensors", reflect.TypeOf((*MockIMySQLRepository)(nil).DeleteSensors), ctx, arg)
}

// GetSensors mocks base method.
func (m *MockIMySQLRepository) GetSensors(ctx context.Context, arg sqlc.GetSensorsParams) ([]sqlc.SensorDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensors", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SensorDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensors indicates an expected call of GetSensors.
func (mr *MockIMySQLRepositoryMockRecorder) GetSensors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensors", reflect.TypeOf((*MockIMySQLRepository)(nil).GetSensors), ctx, arg)
}

// InsertSensorData mocks base method.
func (m *MockIMySQLRepository) InsertSensorData(ctx context.Context, arg sqlc.InsertSensorDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSensorData", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSensorData indicates an expected call of InsertSensorData.
func (mr *MockIMySQLRepositoryMockRecorder) InsertSensorData(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSensorData", reflect.TypeOf((*MockIMySQLRepository)(nil).InsertSensorData), ctx, arg)
}

// UpdateSensors mocks base method.
func (m *MockIMySQLRepository) UpdateSensors(ctx context.Context, arg sqlc.UpdateSensorsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSensors", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSensors indicates an expected call of UpdateSensors.
func (mr *MockIMySQLRepositoryMockRecorder) UpdateSensors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSensors", reflect.TypeOf((*MockIMySQLRepository)(nil).UpdateSensors), ctx, arg)
}
