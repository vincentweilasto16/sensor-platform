// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sensor_data_query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const countSensors = `-- name: CountSensors :one
SELECT COUNT(*)
FROM sensor_data
WHERE 
    (? IS NULL OR device_code = ?)
    AND (? IS NULL OR device_number = ?)
    AND (? IS NULL OR timestamp >= ?)
    AND (? IS NULL OR timestamp <= ?)
`

type CountSensorsParams struct {
	DeviceCode   sql.NullString `json:"device_code"`
	DeviceNumber sql.NullInt32  `json:"device_number"`
	StartTime    sql.NullTime   `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
}

func (q *Queries) CountSensors(ctx context.Context, arg CountSensorsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSensors,
		arg.DeviceCode,
		arg.DeviceCode,
		arg.DeviceNumber,
		arg.DeviceNumber,
		arg.StartTime,
		arg.StartTime,
		arg.EndTime,
		arg.EndTime,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteSensorData = `-- name: DeleteSensorData :exec
DELETE FROM sensor_data
WHERE device_code = ?
    AND device_number = ?
    AND timestamp = ?
`

type DeleteSensorDataParams struct {
	DeviceCode   string    `json:"device_code"`
	DeviceNumber int32     `json:"device_number"`
	Timestamp    time.Time `json:"timestamp"`
}

func (q *Queries) DeleteSensorData(ctx context.Context, arg DeleteSensorDataParams) error {
	_, err := q.db.ExecContext(ctx, deleteSensorData, arg.DeviceCode, arg.DeviceNumber, arg.Timestamp)
	return err
}

const getSensors = `-- name: GetSensors :many
SELECT id, sensor_type, sensor_value, device_code, device_number, timestamp, created_at, updated_at, deleted_at
FROM sensor_data
WHERE 
    (? IS NULL OR device_code = ?)
    AND (? IS NULL OR device_number = ?)
    AND (? IS NULL OR timestamp >= ?)
    AND (? IS NULL OR timestamp <= ?)
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetSensorsParams struct {
	DeviceCode   sql.NullString `json:"device_code"`
	DeviceNumber sql.NullInt32  `json:"device_number"`
	StartTime    sql.NullTime   `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
	Limit        int32          `json:"limit"`
	Offset       int32          `json:"offset"`
}

func (q *Queries) GetSensors(ctx context.Context, arg GetSensorsParams) ([]SensorDatum, error) {
	rows, err := q.db.QueryContext(ctx, getSensors,
		arg.DeviceCode,
		arg.DeviceCode,
		arg.DeviceNumber,
		arg.DeviceNumber,
		arg.StartTime,
		arg.StartTime,
		arg.EndTime,
		arg.EndTime,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorDatum
	for rows.Next() {
		var i SensorDatum
		if err := rows.Scan(
			&i.ID,
			&i.SensorType,
			&i.SensorValue,
			&i.DeviceCode,
			&i.DeviceNumber,
			&i.Timestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSensorData = `-- name: InsertSensorData :exec
INSERT INTO sensor_data (sensor_type, sensor_value, device_code, device_number, timestamp)
VALUES (?, ?, ?, ?, ?)
`

type InsertSensorDataParams struct {
	SensorType   string    `json:"sensor_type"`
	SensorValue  float64   `json:"sensor_value"`
	DeviceCode   string    `json:"device_code"`
	DeviceNumber int32     `json:"device_number"`
	Timestamp    time.Time `json:"timestamp"`
}

func (q *Queries) InsertSensorData(ctx context.Context, arg InsertSensorDataParams) error {
	_, err := q.db.ExecContext(ctx, insertSensorData,
		arg.SensorType,
		arg.SensorValue,
		arg.DeviceCode,
		arg.DeviceNumber,
		arg.Timestamp,
	)
	return err
}

const updateSensorData = `-- name: UpdateSensorData :exec
UPDATE sensor_data
SET sensor_value = ?
WHERE device_code = ?
    AND device_number = ?
    AND timestamp = ?
`

type UpdateSensorDataParams struct {
	SensorValue  float64   `json:"sensor_value"`
	DeviceCode   string    `json:"device_code"`
	DeviceNumber int32     `json:"device_number"`
	Timestamp    time.Time `json:"timestamp"`
}

func (q *Queries) UpdateSensorData(ctx context.Context, arg UpdateSensorDataParams) error {
	_, err := q.db.ExecContext(ctx, updateSensorData,
		arg.SensorValue,
		arg.DeviceCode,
		arg.DeviceNumber,
		arg.Timestamp,
	)
	return err
}
