// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_query.sql

package sqlc

import (
	"context"
)

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, role, created_at, updated_at, deleted_at FROM users
WHERE username = ? and deleted_at IS NULL
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (username, password, role)
VALUES (?, ?, ?)
`

type InsertUserParams struct {
	Username string    `json:"username"`
	Password string    `json:"password"`
	Role     UsersRole `json:"role"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password, arg.Role)
	return err
}
