// Code generated by MockGen. DO NOT EDIT.
// Source: ./sensor_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	request "service-b/internal/dto/request"
	sqlc "service-b/internal/repository/mysql"

	gomock "github.com/golang/mock/gomock"
)

// MockISensorService is a mock of ISensorService interface.
type MockISensorService struct {
	ctrl     *gomock.Controller
	recorder *MockISensorServiceMockRecorder
}

// MockISensorServiceMockRecorder is the mock recorder for MockISensorService.
type MockISensorServiceMockRecorder struct {
	mock *MockISensorService
}

// NewMockISensorService creates a new mock instance.
func NewMockISensorService(ctrl *gomock.Controller) *MockISensorService {
	mock := &MockISensorService{ctrl: ctrl}
	mock.recorder = &MockISensorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorService) EXPECT() *MockISensorServiceMockRecorder {
	return m.recorder
}

// CreateSensor mocks base method.
func (m *MockISensorService) CreateSensor(ctx context.Context, params *request.CreateSensorRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSensor", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSensor indicates an expected call of CreateSensor.
func (mr *MockISensorServiceMockRecorder) CreateSensor(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSensor", reflect.TypeOf((*MockISensorService)(nil).CreateSensor), ctx, params)
}

// GetSensors mocks base method.
func (m *MockISensorService) GetSensors(ctx context.Context, params *request.GetSensorsRequest) ([]*sqlc.SensorDatum, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensors", ctx, params)
	ret0, _ := ret[0].([]*sqlc.SensorDatum)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSensors indicates an expected call of GetSensors.
func (mr *MockISensorServiceMockRecorder) GetSensors(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensors", reflect.TypeOf((*MockISensorService)(nil).GetSensors), ctx, params)
}
