// Code generated by MockGen. DO NOT EDIT.
// Source: ./sensor_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	request "service-a/internal/dto/request"

	gomock "github.com/golang/mock/gomock"
)

// MockISensorService is a mock of ISensorService interface.
type MockISensorService struct {
	ctrl     *gomock.Controller
	recorder *MockISensorServiceMockRecorder
}

// MockISensorServiceMockRecorder is the mock recorder for MockISensorService.
type MockISensorServiceMockRecorder struct {
	mock *MockISensorService
}

// NewMockISensorService creates a new mock instance.
func NewMockISensorService(ctrl *gomock.Controller) *MockISensorService {
	mock := &MockISensorService{ctrl: ctrl}
	mock.recorder = &MockISensorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorService) EXPECT() *MockISensorServiceMockRecorder {
	return m.recorder
}

// GenerateSensorManual mocks base method.
func (m *MockISensorService) GenerateSensorManual(ctx context.Context, params *request.GenerateSensorManualRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSensorManual", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSensorManual indicates an expected call of GenerateSensorManual.
func (mr *MockISensorServiceMockRecorder) GenerateSensorManual(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSensorManual", reflect.TypeOf((*MockISensorService)(nil).GenerateSensorManual), ctx, params)
}

// StartSensorGenerator mocks base method.
func (m *MockISensorService) StartSensorGenerator(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSensorGenerator", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSensorGenerator indicates an expected call of StartSensorGenerator.
func (mr *MockISensorServiceMockRecorder) StartSensorGenerator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSensorGenerator", reflect.TypeOf((*MockISensorService)(nil).StartSensorGenerator), ctx)
}

// StopSensorGenerator mocks base method.
func (m *MockISensorService) StopSensorGenerator(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSensorGenerator", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSensorGenerator indicates an expected call of StopSensorGenerator.
func (mr *MockISensorServiceMockRecorder) StopSensorGenerator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSensorGenerator", reflect.TypeOf((*MockISensorService)(nil).StopSensorGenerator), ctx)
}

// UpdateGenerateSensorFrequency mocks base method.
func (m *MockISensorService) UpdateGenerateSensorFrequency(ctx context.Context, params *request.UpdateGenerateSensorFrequencyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenerateSensorFrequency", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenerateSensorFrequency indicates an expected call of UpdateGenerateSensorFrequency.
func (mr *MockISensorServiceMockRecorder) UpdateGenerateSensorFrequency(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenerateSensorFrequency", reflect.TypeOf((*MockISensorService)(nil).UpdateGenerateSensorFrequency), ctx, params)
}
