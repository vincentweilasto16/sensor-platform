// Code generated by MockGen. DO NOT EDIT.
// Source: ./sensor_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	request "service-a/internal/dto/request"

	gomock "github.com/golang/mock/gomock"
)

// MockISensorService is a mock of ISensorService interface.
type MockISensorService struct {
	ctrl     *gomock.Controller
	recorder *MockISensorServiceMockRecorder
}

// MockISensorServiceMockRecorder is the mock recorder for MockISensorService.
type MockISensorServiceMockRecorder struct {
	mock *MockISensorService
}

// NewMockISensorService creates a new mock instance.
func NewMockISensorService(ctrl *gomock.Controller) *MockISensorService {
	mock := &MockISensorService{ctrl: ctrl}
	mock.recorder = &MockISensorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorService) EXPECT() *MockISensorServiceMockRecorder {
	return m.recorder
}

// GenerateSensor mocks base method.
func (m *MockISensorService) GenerateSensor(ctx context.Context, params *request.GenerateSensorRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSensor", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSensor indicates an expected call of GenerateSensor.
func (mr *MockISensorServiceMockRecorder) GenerateSensor(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSensor", reflect.TypeOf((*MockISensorService)(nil).GenerateSensor), ctx, params)
}
